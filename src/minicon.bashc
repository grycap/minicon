#!/bin/bash
#
# minicon - Minimization of filesystems for containers
# https://github.com/grycap/minicon
#
# Copyright (C) GRyCAP - I3M - UPV 
# Developed by Carlos A. caralla@upv.es
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

function usage() {
  cat <<EOF

minicon aims at reducing the footprint of the filesystem for the container, just adding those 
  files that are needed. That means that the other files in the original container are removed.

$0 <option> -- <main execution>

  --rootfs | -r       Create the filesystem in a specific folder.
  --tar-file | -t     Generate a tar file that contains the resulting filesystem. This is
                      ideal to import it into docker using the command "docker import". If 
                      not specified the --rootfs parameter, minicon will use a temporary 
                      folder.
  --exclude | -e <F>  Exclude all paths that begin with 'F' (it accepts texts for regular 
                      expressions). The files are excluded from the final filesystem, but if 
                      an execution depends on an app in any of these paths, it will be executed 
                      anyway (e.g. -E '/tmp/myapp' -e '/tmp' will analyze myapp, but will not
                      appear in the final filesystem).
  --no-exclude-common | -C
                      The default behavior of minicon is to exclude /tmp, /proc and /dev. If you
                      do not want to exclude them, you should include this flag. The only excluded 
                      folders will be those included in the commandline.
  --include | -I <F>  Force to consider the file (or folder) pointed by 'F'. Take into account that
                      --include has priority over --exclude.
  --execution | -E <cmdline>
                      Executions to analyze, appart from the main execution (you can include a 
                      whole execution with parameters between quotes). It can appear as many time
                      as executions are needed.
                      This is specially useful for the strace plugin. In other case, the effect 
                      will be the same of including the command from the execution in the executables 
                      to analyze. The executions will be made in order of appearance, AFTER the 
                      main execution.
  --no-ldconfig | -L  Do not generate the /etc/ldconfig.so file, adjusted to the new filesystem. 
  --ldconfig | -l     (deprecated) generate the /etc/ldconfig.so file, adjusted to the new 
                      filesystem. This is deprecated because now it is the default behavior if 
                      flag -L is not used.
  --plugin            Activates some plugins and sets the options for them. The syntax is
                      --plugin=<plugin name>:<parameter>=<value>:<parameter>=<value>...
  --plugin-all        Activates all the available plugins, using their default options.
  --logfile | -g <F>  Outputs the information in file F instead of stdout and stderr
  --quiet | -q        Makes the tasks silently
  --version | -V      Shows the version number and finalizes.
  --verbose | -v      Shows more information about the procedure.
  --debug             Shows a lot more information about the procedure.
  --help | -h         Shows this help and exits.

EOF
}

# Checking dependencies
function remove_from_plugins() {
  local P="$1"
  local PP=

  while [ "$PP" != "$PLUGINS_ACTIVATED" ]; do
    PP="$PLUGINS_ACTIVATED"
    PLUGINS_ACTIVATED="$(echo "$PLUGINS_ACTIVATED" | sed "s/\(^\|,\)\($P\(\|:[^,]*\)\)\(,\|$\)/\1\4/g")"
  done
}

function verify_dependencies() {
  if ! strace -V > /dev/null 2> /dev/null; then
    remove_from_plugins "strace"
    p_warning "disabling strace plugin because strace command is not available"
  fi
  if ! file --version > /dev/null 2> /dev/null; then
    remove_from_plugins "scripts"
    p_warning "disabling scripts plugin because file command is not available"
  fi
  if [ "$TARFILE" != "" ]; then
    if ! tar --version > /dev/null 2> /dev/null; then
      bashc.finalize 1 "tar command is needed to create tar files"
    fi
  fi
  if ! hash ldd > /dev/null 2> /dev/null; then
    bashc.finalize 1 "ldd command is needed for scripts plugin"
  fi
}

source all.bashc
source lib/plugins.bashc
source version

function is_protected() {
  local SRC="$1"
  local PROTECTED="/proc.*,/dev.*,/sys.*,/"
  local CURRENT

  while read -d ',' CURRENT; do
    CURRENT="${CURRENT}\$"
    if [[ "$SRC" =~ ^$CURRENT ]]; then
      return 0
    fi
  done <<<"${PROTECTED},"
  return 1
}

function _build_rsync() {
  local CURRENT="$1"
  local RES=
  while [ "$CURRENT" != "/" -a "$CURRENT" != "." -a "$CURRENT" != ".." ]; do
    RES="--include ${CURRENT} ${RES}"
    CURRENT="$(dirname "$CURRENT")"
  done
  local i
  for ((i=0;i<${#EXCLUDED_PATHS[@]};i=i+1)); do
    RES="${RES} --exclude ${EXCLUDED_PATHS[$i]} --exclude ${EXCLUDED_PATHS[$i]}/\*"
  done
  echo "$RES"
}

function cp_rsync() {
  local SRC="$1"
  local ROOTFS="$2"
  local RECURSE="$3"

  if [ "${SRC:0:2}" == "./" ]; then
    SRC="${PWD}${SRC:1}"
  fi

  local SRCDIR="$(dirname "$SRC")"
  DST="$ROOTFS/$SRCDIR"

  p_out "$SRC"
  if [ "$RECURSE" == "true" ]; then
    p_debug "copying $SRC to $DST (recurse)"
    rsync -a $(_build_rsync "$SRCDIR") --include "${SRC}" --include "${SRC}/**" --exclude '*' / "$ROOTFS"
  else
    p_debug "copying $SRC to $DST"
    rsync -a $(_build_rsync "$SRCDIR") --include "${SRC}" --exclude '*' / "$ROOTFS"
  fi
}

function cp_cp() {
  local SRC="$1"
  local ROOTFS="$2"
  local RECURSE="$3"

  if [ "${SRC:0:2}" == "./" ]; then
    SRC="${PWD}${SRC:1}"
  fi
  
  local DST=
  DST="$ROOTFS/$(dirname "$SRC")"
  mkdir -p "$DST"
  
  p_out "$SRC"
  if [ -d "$SRC" ]; then
    if [ "$RECURSE" == "true" ]; then
      p_debug "copying $SRC to $DST (recurse)"
      cp -p -n -r "$SRC" "$DST"
    else
      p_debug "copying $SRC to $DST (mkdir)"
      mkdir -p "${DST}/$(basename "$SRC")"
    fi
  else
    p_debug "copying $SRC to $DST"
    cp -p -n "$SRC" "$DST"
  fi
}

_FILES_COPIED=""

function cp_wrapper() {
  if [ "$CP_FUNC" == "" ]; then
    rsync --version 2> /dev/null > /dev/null
    if [ $? -eq 0 ]; then
      CP_FUNC=cp_rsync
    else
      p_warning "rsync is not available... some file permissions will be lost"
      CP_FUNC=cp_cp
    fi
  fi

  local SRC ROOTFS RECURSE=false
  while [ $# -gt 0 ]; do
    case "$1" in
      -r) RECURSE=true;;
      *)  if [ "$SRC" == "" ]; then
            SRC="$1"
          else 
            if [ "$ROOTFS" == "" ]; then
              ROOTFS="$1"
            fi
          fi;;
    esac
    shift
  done
  
  local EXISTING
  EXISTING="$(echo "$_FILES_COPIED" | grep "^[tf]:${SRC}$")"
  local METHOD="${EXISTING:0:1}"
  EXISTING="${EXISTING:2}"
  if [ "$EXISTING" == "$SRC" -a "${METHOD}" == "${RECURSE:0:1}" ]; then
    p_debug "skipping file $SRC because it has been already copied"
    return
  fi

  $CP_FUNC "$SRC" "$ROOTFS" "$RECURSE"
  _FILES_COPIED="${_FILES_COPIED}
${RECURSE:0:1}:${SRC}"
}

function copy() {
  # copies one file (or folder) to the same destination in the root filesystem
  # - it does not overwrite contents
  local SRC="$1"
  local RECURSE="$2"
  if [ "$RECURSE" != "-r" ]; then
    RECURSE=
  fi

  local n EP

  # now check whether it is a link or not... if it is a link, we'll copy the actual file and will create the link
  SRC="$(_linked_file "$SRC")"

  if is_protected "$SRC"; then
    p_info "excluding file $SRC because it is in a protected path"
    return 0
  fi

  local ALREADY_INCLUDED=false

  #for ((n=0;n<${#INCLUDED_PATHS[@]};n++)); do
  #  EP="${INCLUDED_PATHS[$n]}"
  #  if [[ "$SRC" =~ ^$EP ]]; then
  #    ALREADY_INCLUDED=true
  #    break
  #  fi
  #done

  if [ "$ALREADY_INCLUDED" == "false" ]; then
    for ((n=0;n<${#EXCLUDED_PATHS[@]};n++)); do
      EP="${EXCLUDED_PATHS[$n]}"
      if [[ "$SRC" =~ ^$EP ]]; then
        p_info "excluding ${SRC} because it matches pattern ${EP}"
        return 0
      fi
    done
  fi

  if [ "$SRC" == "." -o "$SRC" == ".." ]; then
    p_warning "cowardly refusing to copy folder $SRC"
    return
  fi

  local DST
  if [ "$VERBOSE" == "true" ]; then
    p_info "  processing $SRC... "
  fi
  if [ ! -e "$SRC" ]; then
    p_error 1 "failed to read $SRC"
  fi

  cp_wrapper $RECURSE "$SRC" "$ROOTFS"
}

function is_plugin_active() {
  # Checks whether a plugin is activated or not
  if [[ "$PLUGINS_ACTIVATED" =~ (^|,)$1(|:[^,]+)(,|$) ]]; then
    return 0
  fi  
  return 1
}

function add_command() {
  local CMDTOADD="$1"
  local n=0
  local ALREADY_EXISTS=false
  while [ $n -lt ${#COMMANDS_TO_ADD[@]} ]; do
    if [ "$CMDTOADD" == "${COMMANDS_TO_ADD[$n]}" ]; then
      ALREADY_EXISTS=true
      break
    fi
    n=$((n+1))
  done
  if [ "$ALREADY_EXISTS" == "false" ]; then
    p_debug "need to analyze $CMDTOADD"
    COMMANDS_TO_ADD+=( "$CMDTOADD" )
  fi
}

# Now we are activating the basic plugins
EXCLUDED_PATHS=()
INCLUDED_PATHS=()
PLUGINS_ACTIVATED=link,which,folder,ldd,scripts
COMMANDS_TO_ADD=()
EXECUTIONS=()
FORCEFOLDER=false
ROOTFS=
LDCONFIGFILE=/etc/ld.so.conf
MAINEXECUTION=()

# Parse the commandline into an array
bashc.parameter_parse_commandline "$@"
bashc.parameters_start

while bashc.parameters_next; do
  PARAM="$(bashc.parameters_current)"
  case "$PARAM" in
    --plugin-all)           PLUGINS_ACTIVATED="$(plugin_list),${PLUGINS_ACTIVATED}";;
    --plugin=*)             PLUGINS_ACTIVATED="${PLUGINS_ACTIVATED},${PARAM:9}";;
    --exclude|-e)           bashc.parameters_next
                            PARAM="$(bashc.parameters_current)"
                            EXCLUDED_PATHS+=("$PARAM");;
    --no-exclude-common|-C) NOEXCLUDECOMMON=true;;
    --include|-I)           bashc.parameters_next
                            PARAM="$(bashc.parameters_current)"
                            INCLUDED_PATHS+=("$PARAM");;
    --logfile|-g)           bashc.parameters_next
                            LOGFILE="$(bashc.parameters_current)";;
    --quiet|-q)             QUIET=true;;
    --tarfile|-t)           bashc.parameters_next
                            TARFILE="$(bashc.parameters_current)";;
    --ldconfig|-l)          LDCONFIGFILE=/etc/ld.so.conf;;
    --no-ldconfig|-L)       LDCONFIGFILE=;;
    --verbose|-v)           VERBOSE=true;;
    --debug)                DEBUG=true;;
    --force|-f)             FORCEFOLDER=true;;
    --rootfs|-r)            bashc.parameters_next
                            ROOTFS="$(bashc.parameters_current)"
                            if [ ! -d "$(dirname $ROOTFS)" ]; then
                              bashc.finalize 1 "invalid folder (parent folder must exist)"
                            fi;;
    --execution|-E)         bashc.parameters_next
                            PARAM="$(bashc.parameters_current)"
                            EXECUTIONS+=("$PARAM");;
    --version | -V)         echo "$VERSION" && bashc.finalize;;
    --help | -h)            usage && bashc.finalize;;
    --)                     while bashc.parameters_next; do
                              PARAM="$(bashc.parameters_current)"
                              MAINEXECUTION+=("$PARAM")
                            done;;
    *)                      usage && bashc.finalize 1 "unexpected parameter: $PARAM";;
  esac
done

[ "$QUIET" == "true" ] && DEBUG= VERBOSE=

# Exclude the common non-wanted folder (if not prevented)
if [ "$NOEXCLUDECOMMON" != "true" ]; then
  EXCLUDED_PATHS+=("/sys")
  EXCLUDED_PATHS+=("/tmp")
  EXCLUDED_PATHS+=("/dev")
  EXCLUDED_PATHS+=("/proc")
fi

# Add the main execution in first place
CURRENT_CMD=()
if [ ${#MAINEXECUTION} -gt 0 ]; then
  EXECUTIONS=("$(bashc.build_cmdline "${MAINEXECUTION[@]}")" "${EXECUTIONS[@]}")
fi

# Now manage the executions
if [ ${#EXECUTIONS[@]} -gt 0 ]; then
  for ((n=0;n<${#EXECUTIONS[@]};n=n+1)); do
    bashc.arrayze_cmd CURRENT_CMD "${EXECUTIONS[$n]}"

    # Remove the possible options to the strace command
    _CURRENT_CMD="${CURRENT_CMD[0]}"
    _CURRENT_CMD_N_PATH="${_CURRENT_CMD##*,}"
    
    p_debug "adding command ${_CURRENT_CMD_N_PATH} to analyze"
    add_command "$_CURRENT_CMD_N_PATH"
  done
fi

if [ "$TARFILE" != "" -a "$ROOTFS" == "" ]; then
  ROOTFS=$(bashc.tempdir)
  FORCEFOLDER=true
fi

[ "$ROOTFS" == "" ] && bashc.finalize 1 "you must provide a folder (--rootfs) to create the root filesystem or request a tar file (--tarfile)"

ROOTFS="$(readlink -f "$ROOTFS")"
[ "$ROOTFS" == "" ] && bashc.finalize 1 "invalid folder to create the root filesystem (the parent folder MUST exist)"

DANGER_FOLDERS="/ /etc /var /sys /proc"
for F in $DANGER_FOLDERS; do
  [ "$ROOTFS" == "$F" ] && bashc.finalize "refusing to build root filesystem in folder $ROOTFS"
done
  
[ -e "$ROOTFS" -a ! -d "$ROOTFS" ] && bashc.finalize 1 "$ROOTFS exists but it is not a folder"

if [ "$FORCEFOLDER" != "true" -a -d "$ROOTFS" ]; then
  read -p "folder for root filesystem ($ROOTFS) already exists. Are you sure to use it? (y/N) " CONFIRM
  if [ "${CONFIRM^^}" != "Y" ]; then
    bashc.finalize 1 "aborting"
  fi
fi

# Check dependencies first
verify_dependencies

p_debug "creating $ROOTFS"
mkdir -p "$ROOTFS"
mkdir -p "$ROOTFS/tmp"

p_info "copying forced paths"

for ((n=0;n<${#INCLUDED_PATHS[@]};n=n+1)); do
  copy "${INCLUDED_PATHS[$n]}" -r
done

if is_plugin_active "strace"; then
  for ((n=0;n<${#EXECUTIONS[@]};n=n+1)); do
    STRACE_command "${EXECUTIONS[$n]}"
  done
fi

p_info "analyzing..."

i_current=0
while [ $i_current -lt ${#COMMANDS_TO_ADD[@]} ]; do
  CURRENT_CMD="${COMMANDS_TO_ADD[$i_current]}"
  for p in $(PLUGIN_funcs); do
    if is_plugin_active "${p##*_}"; then
      p_debug "invoking plugin ${p##*_}"
      _C_PLUGIN="${p##*_}"
      bashc.set_logger "${_C_PLUGIN^^}"
      if ! $p "$CURRENT_CMD"; then
        break
      fi
    fi
  done
  bashc.set_logger
  i_current=$(($i_current+1))
done

if [ "$LDCONFIGFILE" != "" -a -e "$ROOTFS/$LDCONFIGFILE" ]; then
  p_debug "creating ldconfig"
  TMPFILE=$(bashc.tempfile)
  awk '!a[$0]++' "$ROOTFS/$LDCONFIGFILE" > "$TMPFILE"
  mv "$TMPFILE" "$ROOTFS/$LDCONFIGFILE"
  ldconfig -r "$ROOTFS"
  p_out "ldconfig recreated"
fi

if [ "$TARFILE" != "" ]; then
  if [ "$TARFILE" != "-" ]; then
    p_info "producing tar file $TARFILE"
    tar cf "$TARFILE" -C "$ROOTFS" .
  else
    tar c -C "$ROOTFS" .
  fi
fi
